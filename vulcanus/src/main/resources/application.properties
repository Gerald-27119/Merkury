spring.application.name=vulcanus
server.port=8080
# H2 Database Configuration
#spring.datasource.url=jdbc:h2:mem:testdb;MODE=PostgreSQL
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=password
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql=true
# PostgreSQL Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/dev_postgres_db
spring.datasource.username=user
spring.datasource.password=password
# JPA properties for PostgreSQL
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true
# Clean up Postgres on startup, if you want to persist data across application restarts, change the following property to 'update'
spring.jpa.hibernate.ddl-auto=create-drop
# MongoDB Configuration
spring.data.mongodb.uri=mongodb://user:password@localhost:27017/dev_mongo_db
# Enable detailed logging for MongoDB operations
logging.level.org.springframework.data.mongodb.core.MongoTemplate=DEBUG
logging.level.org.springframework.data.mongodb.core.convert.MappingMongoConverter=DEBUG
logging.level.org.springframework.data.mongodb.core.MongoOperations=DEBUG
logging.level.org.mongodb.driver=DEBUG
# Clean up MongoDB collections on startup, if you want to persist data across application restarts, change the following property to 'false'
spring.data.mongodb.auto-index-creation=true
spring.data.mongodb.database=dev_mongo_db

#logging
logging.level.org.springframework.security=TRACE
#urls
url.github-email-endpoint=https://api.github.com/user/emails
url.after-login-page-url=http://localhost:5173/main-view
url.oauth2-login-page-url=http://localhost:5173/login
url.oauth2-default-success-url=http://localhost:8080/account/login-success
url.oauth2-failure-url=http://localhost:5173/error?error=oauth2-login-failure
url.logout-url=http://localhost:5173/
#github
spring.security.oauth2.client.registration.github.client-id=${GITHUB_CLIENT_ID}
spring.security.oauth2.client.registration.github.client-secret=${GITHUB_CLIENT_SECRET}
spring.security.oauth2.client.registration.github.scope=user:email
spring.security.oauth2.client.provider.github.user-info-uri=https://api.github.com/user
spring.security.oauth2.client.provider.github.authorization-uri=https://github.com/login/oauth/authorize
spring.security.oauth2.client.provider.github.token-uri=https://github.com/login/oauth/access_token
spring.security.oauth2.client.provider.github.user-name-attribute=id
#google
